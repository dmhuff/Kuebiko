/**
 * Kuebiko - NotePanel.java
 * Copyright 2013 Dave Huffman (dave dot huffman at me dot com).
 * Open source under the BSD 3-Clause License.
 */

package dmh.kuebiko.view;

import java.awt.CardLayout;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;

import org.apache.log4j.Logger;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;

import dmh.kuebiko.model.Note;
import dmh.swing.huxley.HuxleyUiManager;

/**
 * UI panel for displaying and editing notes.
 *
 * @author davehuffman
 */
class NotePanel extends JPanel {
    private static final long serialVersionUID = 1L;
    
    private static final Logger log = Logger.getLogger(NotePanel.class);
    
    private static JTextArea rSyntaxTextAreaFactory() {
        RSyntaxTextArea textArea = new RSyntaxTextArea(10, 40);
        textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_NONE);
        textArea.setLineWrap(true);
        textArea.setCodeFoldingEnabled(false);
        textArea.setAntiAliasingEnabled(false);
        textArea.setHighlightCurrentLine(false);
        textArea.setAnimateBracketMatching(false);
        textArea.setBracketMatchingEnabled(false);
        textArea.setTabsEmulated(true);
        textArea.setTabSize(2);
        RTextScrollPane sp = new RTextScrollPane(textArea);
        sp.setFoldIndicatorEnabled(true);
        return textArea;
    }
    
    /** 
     * Enumeration of CardLayout identifiers.
     * @see NotePanel#cardLayout
     */
    private enum CardId { NO_NOTE_MESSAGE, NOTE_TEXT }
    
    private final CardLayout cardLayout = new CardLayout();
    private final HuxleyUiManager huxleyUiManager = new HuxleyUiManager(rSyntaxTextAreaFactory());
    
    /** The currently selected note. */
    private Note note;

    NotePanel() {
        initialize();
        additionalSetup();
    }

    /**
     * Initialize the contents of the frame. The contents of this method was 
     * generated by Window Builder Pro.
     */
    private void initialize() {
        setLayout(cardLayout);
        
        JLabel noSelectionLabel = new JLabel("No note selected"); // TODO i18n.
        noSelectionLabel.setHorizontalAlignment(SwingConstants.CENTER);
        add(noSelectionLabel, CardId.NO_NOTE_MESSAGE.toString());
        
        add(huxleyUiManager.getUiPanel(), CardId.NOTE_TEXT.toString());
    }
    
    /**
     * Perform additional setup to the frame. This is separate from the 
     * initialize() method so that the GUI builder doesn't mess with it.
     */
    private void additionalSetup() {
        this.addFocusListener(
                new FocusAdapter() {
                    @Override
                    public void focusGained(FocusEvent e) {
                        // When the panel gains focus, transfer focus to the
                        // note text area if it is visible.
                        if (huxleyUiManager.getUiPanel().isVisible()) {
                            huxleyUiManager.getUiPanel().requestFocusInWindow();
                        }
                    }
                });
        
        // By default, no note should be displayed.
        setNote(null);
    }

    /**
     * Synchronize the current note with data from the UI.
     */
    void syncNote() {
        if (note != null) {
            syncNote(note);
        }
    }
    
    /**
     * Synchronize a note with data from the UI.
     * @param syncNote The note to synchronize.
     */
    private void syncNote(Note syncNote) {
        log.debug(String.format("syncNote([%s]).", syncNote));
        syncNote.setText(huxleyUiManager.getText());
    }

    /**
     * Handler for a note selection.
     * @param prevNote The previously displayed note.
     */
    private void onNoteSelected(Note prevNote) {
        log.debug(String.format("onNoteSelected(); [%s]; noteChanged=[%b].", 
                note, huxleyUiManager.isTextChanged()));

        // Save any changes made to the previously selected note.
        if (prevNote != null && huxleyUiManager.isTextChanged()) {
            syncNote(prevNote);
        }
        
        if (note == null) {
            cardLayout.show(this, CardId.NO_NOTE_MESSAGE.toString());
            return;
        }
        huxleyUiManager.resetText(note.getText());
        cardLayout.show(this, CardId.NOTE_TEXT.toString());
    }
    
    HuxleyUiManager getHuxleyUiManager() {
        return huxleyUiManager;
    }
    
    /**
     * @return The note currently displayed in the panel, or null if no note is
     *         being displayed.
     */
    public Note getNote() {
        return note;
    }
    
    /**
     * Assign a note to be displayed in the panel.
     * @param note The note to be displayed, or null if no note is to be 
     *             displayed.
     */
    public void setNote(Note note) {
        Note prevNote = this.note;
        this.note = note;
        
        // Don't run the selection logic if the client is just ensuring that 
        // the selected note is null.
        if (this.note != null || prevNote != null) {
            onNoteSelected(prevNote);
        }
    }
}
