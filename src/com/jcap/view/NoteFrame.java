package com.jcap.view;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

import com.jcap.controller.NoteManager;

public class NoteFrame extends JFrame {
    private static final long serialVersionUID = 1L;

    private final NoteManager noteMngr;
    
    private JTextField searchText;
    private JSplitPane splitPane;
    private JTextArea noteTextArea;
    private NoteTable noteTable;
    private JScrollPane noteScroll;
    private JScrollPane noteTableScroll;

    /**
     * Create the frame.
     */
    public NoteFrame(NoteManager noteMngr) {
        this.noteMngr = noteMngr;
        
        initialize();
        additionalSetup();
    }
    
    private NoteTable newNoteTable() {
        return new NoteTable(new NoteTableModel(noteMngr));
    }

    /**
     * Initialize the contents of the frame. The contents of this method was 
     * generated by Window Builder Pro.
     */
    private void initialize() {
        setTitle("Kuebiko");
        setBounds(100, 100, 450, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.columnWidths = new int[] { 0, 0 };
        gridBagLayout.rowHeights = new int[] { 0, 0, 0, 0, 0, 0 };
        gridBagLayout.columnWeights = new double[] { 1.0, Double.MIN_VALUE };
        gridBagLayout.rowWeights = new double[] { 0.0, 1.0, 1.0, 1.0, 1.0,
                Double.MIN_VALUE };
        getContentPane().setLayout(gridBagLayout);

        searchText = new JTextField();
        GridBagConstraints gbc_searchText = new GridBagConstraints();
        gbc_searchText.insets = new Insets(0, 0, 0, 0);
        gbc_searchText.fill = GridBagConstraints.HORIZONTAL;
        gbc_searchText.gridx = 0;
        gbc_searchText.gridy = 0;
        getContentPane().add(searchText, gbc_searchText);
        searchText.setColumns(10);

        splitPane = new JSplitPane();
        splitPane.setBorder(null);
        splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
        GridBagConstraints gbc_splitPane = new GridBagConstraints();
        gbc_splitPane.gridheight = 4;
        gbc_splitPane.insets = new Insets(0, 0, 0, 0);
        gbc_splitPane.fill = GridBagConstraints.BOTH;
        gbc_splitPane.gridx = 0;
        gbc_splitPane.gridy = 1;
        getContentPane().add(splitPane, gbc_splitPane);

        noteScroll = new JScrollPane();
        noteScroll.setBorder(null);
        splitPane.setRightComponent(noteScroll);

        noteTextArea = new JTextArea();
        noteTextArea.setLineWrap(true);
        noteTextArea.setTabSize(4);
        noteScroll.setViewportView(noteTextArea);

        noteTableScroll = new JScrollPane();
        noteTableScroll.setMinimumSize(new Dimension(23, 100));
        splitPane.setLeftComponent(noteTableScroll);
        noteTable = newNoteTable();
        noteTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        noteTableScroll.setViewportView(noteTable);
    }
    
    /**
     * Perform additional setup to the frame. This is separate from the 
     * initialize() method so that the GUI builder doesn't mess with it.
     */
    private void additionalSetup() {
        setFocusTraversalPolicy(new CustomFocusTraversalPolicy(
                searchText, noteTextArea));
        
        AutoCompleteDecorator.decorate(searchText, noteMngr.getNoteTitles(), false);
        searchText.getInputMap().put(KeyStroke.getKeyStroke("ESCAPE"), "clear");
        searchText.getDocument().addDocumentListener(
                new DocumentListener() {
                    @Override
                    public void changedUpdate(DocumentEvent e) {
                        updateNoteTableFilter();
                    }
                    @Override
                    public void insertUpdate(DocumentEvent e) {
                        updateNoteTableFilter();
                    }
                    @Override
                    public void removeUpdate(DocumentEvent e) {
                        updateNoteTableFilter();
                    }
                });
        searchText.getActionMap().put("clear", new AbstractAction() {
            private static final long serialVersionUID = 1L;

            @Override
            public void actionPerformed(ActionEvent e) {
                searchText.setText("");
            }});
        
        searchText.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                searchText.selectAll();
            }
            @Override
            public void focusLost(FocusEvent e) {
                //noteTable.get
            }
        });
        
        noteTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent event) {
                int rowIndex = event.getFirstIndex();
                noteTextArea.setText(noteMngr.getNoteAt(rowIndex).getText());
            }});
    }
    
    private void updateNoteTableFilter() {
        noteTable.filter(searchText.getText());
    }
}
